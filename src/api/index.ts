import express, { Request, Response } from "express";
import cors from "cors";
import path from "path";
import helmet from "helmet";
import fileUpload from "express-fileupload";

import { adminRouter, referenceRouter } from "./routes";
import { portalRouter } from "./routes/portal";

import * as config from "./config";
import { doHealthCheck } from "./utils/health_check";
import { RequireActive, configureAuthentication } from "./routes/auth";

import * as Sentry from "@sentry/node";
import { CreateMigrationRoutes } from "./data/migrator";
if (config.SENTRY_DSN.length > 0) Sentry.init({ dsn: config.SENTRY_DSN });

const app = express();
app.use(express.json()); // for parsing application/json
app.use(express.urlencoded({ extended: true, limit: "10mb" })); // for parsing application/x-www-form-urlencoded
app.use(fileUpload());
//app.use(helmet());
app.use(
  helmet.contentSecurityPolicy({
    directives: {
      "default-src": ["'self'"],
      "base-uri": ["'self'"],
      "block-all-mixed-content": [],
      "font-src": ["'self'", "https:", "data:"],
      "frame-ancestors": ["'self'"],
      "img-src": ["'self'", "data:", "https:"],
      "object-src": ["'none'"],
      "script-src": ["'self'", "'unsafe-eval'"], // added https to accomodate esri components?
      "script-src-attr": ["'none'"],
      "style-src": ["'self'", "https:", "'unsafe-inline'"],
      "worker-src": ["'self'", "blob:"],
      "connect-src": ["'self'"],
    },
  })
);

// very basic CORS setup
app.use(
  cors({
    origin: config.FRONTEND_URL,
    optionsSuccessStatus: 200,
    credentials: true,
  })
);

CreateMigrationRoutes(app);

configureAuthentication(app);

app.get("/_status", (req: Request, res: Response) => {
  doHealthCheck(res);
});

app.use("/api/v2/reference", RequireActive, referenceRouter);
app.use("/api/v2/admin", RequireActive, adminRouter);
app.use("/api/portal", portalRouter);

// serves the static files generated by the front-end
app.use(express.static(path.join(__dirname, "web")));

// if no other routes match, just send the front-end
app.use((req: Request, res: Response) => {
  console.log(`Request to ${req.path} served by sendFile`);
  res.sendFile(path.join(__dirname, "web") + "/index.html");
});

app.listen(config.API_PORT, () => {
  console.log(`API listening on port ${config.API_PORT}`);
});
